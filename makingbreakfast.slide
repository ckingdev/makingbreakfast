Making Breakfast
or Basic Concurrency Patterns in Go
18:00 3 Nov 2015
Tags: concurrency, parallelism, goroutines, channels, sync

Cammie Palone
Consultant, Software Engineering
cam@cpalone.me
@mcpalone

* Making Breakfast in Cereal
er, serial.

- Start coffee
- Pour coffee
- Start toast
- Take out toast

.play slide1/slide1.go

* What is concurrency?
Concurrency without parallelism

- Writing a program
- Making breakfast alone

Concurrency with parallelism

- Playing a video game
- Two people making breakfast

* A First Look at Concurrency

Make sure we're only using one CPU (i.e., one person). Otherwise, Go runtime will make this parallel.

The process goes...
- Start coffee
- Start toast
- Take out toast
- Pour coffee

.play slide2/slide2.go /^func main/,/^}/

* Channels
What if we don't know how long to wait?

Could exit before tasks are done.

- use channels to communicate between goroutines
- use select statements to wait on multiple channels

.play slide3/slide3.go /^func main/,/^}/

* Cooperation

How do we keep goroutines coordinated?

Channels + select statements.

Other ways to cooperate

- Sharing memory
- sync.Waitgroup
- Closures (special case of sharing memory)

* sync.Waitgroup and Closures

.play slide5/slide5.go /^func main/,/^}/
